#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Aug 12 04:39:45 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
expect -exact "\[1m\[7m#\[27m\[1m\[0m                                                                                                                                                                       \r \r\r\[0m\[27m\[24m\[Jmicaldas# \[K\[?2004h"
send -- "my"
expect -exact "my"
send -- "sql -u mic -p\r"
expect -exact "\[?2004l\r\r
Enter password: "
send -- "xxxx\r"
expect -exact "\r
(B\[0;1mWelcome to the MariaDB monitor.  Commands end with ; or \\g.\r
(B\[m(B\[0;1mYour MariaDB connection id is 786\r
Server version: 10.6.3-MariaDB Arch Linux\r
\r
(B\[m(B\[0;1mCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\r
\r
(B\[m(B\[0;1mType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r
\r
(B\[mMariaDB \[(none)\]> "
send -- ""
expect -exact "(B\[0;1mBye\r
(B\[m\[1m\[7m#\[27m\[1m\[0m                                                                                                                                                                       \r \r\r\[0m\[27m\[24m\[Jmicaldas# \[K\[?2004h"
send -- ""
expect eof
